%%{
    /* get ti/drivers common utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    /* localize the object names with this device ID */
    let devId = system.deviceData.deviceId;
    let devFamily = Common.device2DeviceFamily(devId);
    let boardName = Common.boardName();
%%}
/*
 *  ======== Board.h ========
 *  Configured TI-Drivers module declarations
 *
 *  DO NOT EDIT - This file is generated for the `boardName`
 *  by the SysConfig tool.
 */
#ifndef ti_drivers_Board_h
#define ti_drivers_Board_h

#define Board_`boardName`

/* Temporary define for backwards compatibility!!! */
#define __`boardName`_BOARD_H__

#ifndef `devFamily`
#define `devFamily`
#endif

#include <stdint.h>

/* support C++ sources */
#ifdef __cplusplus
extern "C" {
#endif

% /* compute a canonical order for the used modules */
% let keys = Object.keys(system.modules).sort();
%
% /* loop over all modules in the current configuration */
% for (let i = 0; i < keys.length; i++) {
    % let mod = system.modules[keys[i]];
    % if (mod.templates && mod.templates.boardh) {
        % /* load its template and expand it */
        % let gen = system.getTemplate(mod.templates.boardh);

`gen(mod)`
    % }
% }

/*
 *  ======== Board_init ========
 *  Perform all required TI-Drivers initialization
 *
 *  This function should be called once at a point before any use of
 *  TI-Drivers.
 */
extern void Board_init(void);

/*
 *  ======== Board_initGeneral ========
 *  (deprecated)
 *
 *  Board_initGeneral() is defined purely for backward compatibility.
 *
 *  All new code should use Board_init() to do any required TI-Drivers
 *  initialization _and_ use <Driver>_init() for only where specific drivers
 *  are explicitly referenced by the application.  <Driver>_init() functions
 *  are idempotent.
 */
#define Board_initGeneral Board_init

#ifdef __cplusplus
}
#endif

#endif /* include guard */
