%%{
    let I2C = args[0]; /* passed by /ti/drivers/templates/Board.c.xdt */

    /* get ti/drivers common utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    let instances = I2C.$instances;
    let defs = Common.genBoardHeader(instances, I2C);

    let board = system.deviceData.board;
    let address = [];
    let define = [];

    /* Generate I2C slave addresses for LaunchPads and SensorTags */
    if (board && board.name) {
        let name = board.name;

        /* define[n] maps to address[n] one for one */

        /* CC3220 & CC3235 */
        if (name.match(/cc32[23][05]/i)) {
            define.push("#define Board_SENSORS_BP_TMP_ADDR");
            address.push("(0x40)");
            define.push("#define Board_TMP_ADDR");

            if (name.match(/cc3220/i)) {
                /* TMP006 I2C slave address */
                address.push("(0x41)");
            }
            else {
                /* TMP116 I2C slave address */
                address.push("(0x49)");
            }
        }
        /* CC13XX & CC26XX STKs */
        else if (name.match(/cc[12].*STK/i)) {
            define.push("#define Board_TMP_ADDR");
            address.push("(0x44)");
            define.push("#define Board_BMP280_ADDR");
            address.push("(0x77)");
            define.push("#define Board_HDC1000_ADDR");
            address.push("(0x43)");
            define.push("#define Board_MPU9250_ADDR");
            address.push("(0x68)");
            define.push("#define Board_MPU9250_MAG_ADDR");
            address.push("(0x0C)");
            define.push("#define Board_OPT3001_ADDR");
            address.push("(0x45)");
        }
        else {
            define.push("#define Board_TMP_ADDR");
            address.push("(0x40)");
            define.push("#define Board_SENSORS_BP_TMP_ADDR");
            address.push("Board_TMP_ADDR");
        }

        /* MSP????432 */
        if (name.match(/MSP.*432/i)) {
            define.push("#define Board_TPL0401_ADDR");
            address.push("(0x40)");
        }
    }

    let lines = [];
    for (let i = 0; i < define.length; i++) {
        lines[i] = define[i] + (" ").repeat(35 - define[i].length) + address[i];
    }

    let definitions = [];
    if (lines) {
        definitions = lines.join('\n');
    }
%%}
`defs`

% if (definitions) {
/* Board specific I2C addresses */
`definitions`
% }