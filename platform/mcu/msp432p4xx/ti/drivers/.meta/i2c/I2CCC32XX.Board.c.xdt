%%{
    let I2C = args[0]; /* passed by /ti/drivers/templates/Board.c.xdt */

    /* get ti/drivers common utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    /* localize the object names with this device ID */
    let devId = system.deviceData.deviceId;

    /* shorthand names for some common references in template below */
    let getPort = Common.getPort;
    let instances = I2C.$instances;

    /* Board_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = I2C.defaultInstanceName + "COUNT";
%%}
/*
 *  =============================== I2C ===============================
 */

#include <ti/drivers/I2C.h>
#include <ti/drivers/i2c/I2CCC32XX.h>

/* include CC32XX driverlib definitions */
#include <ti/devices/cc32xx/inc/hw_ints.h>
#include <ti/devices/cc32xx/inc/hw_memmap.h>

#define `countDef` `instances.length`

/*
 *  ======== i2c`devId`Objects ========
 */
I2CCC32XX_Object i2c`devId`Objects[`countDef`];

/*
 *  ======== i2c`devId`HWAttrs ========
 */
const I2CCC32XX_HWAttrsV1 i2c`devId`HWAttrs[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    %
    % /* i2c is a hash of resources assigned to inst: sclPin, sdaPin */
    % let i2c = inst.i2c;
    % //for (let x in inst.i2c.$solution) console.log(x + " " + inst.i2c.$solution[x]);
    % //for (let x in i2c.sclPin.$solution) console.log(x + " " + i2c.sclPin.$solution[x]);
    % /* name is the peripheral name: EUSCI_A<num> or EUSCI_B<num> ... */
    % let name = inst.i2c.$solution.peripheralName;
    % let id = name.substring(3);      /* A0 or A1 or B0 or ... */
    % let sclPin = i2c.sclPin.$solution.packagePinName;
    % if (sclPin.length == 1) sclPin = "0" + sclPin;
    % let sdaPin = i2c.sdaPin.$solution.packagePinName;
    % if (sdaPin.length == 1) sdaPin = "0" + sdaPin;
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .baseAddr = I2CA`id`_BASE,
        .intNum = INT_I2CA`id`,
        .intPriority = `Common.intPriority2Hex(inst.intPriority)`,
        .clkPin  = I2CCC32XX_PIN_`sclPin`_I2C_SCL,
        .dataPin = I2CCC32XX_PIN_`sdaPin`_I2C_SDA
    },
% }
};

/*
 *  ======== I2C_config ========
 */
const I2C_Config I2C_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % let name = inst.$name;
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .fxnTablePtr = &I2CCC32XX_fxnTable,
        .object = &i2c`devId`Objects[`name`],
        .hwAttrs = &i2c`devId`HWAttrs[`name`]
    },
% }
};

const uint_least8_t I2C_count = `countDef`;
