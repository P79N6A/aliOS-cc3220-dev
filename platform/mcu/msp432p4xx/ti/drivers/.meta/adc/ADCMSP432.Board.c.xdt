%%{
    let ADC = args[0]; /* passed by /ti/drivers/templates/Board.c.xdt */

    /* get ti/drivers common utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    /* shorthand names for some common references in template below */
    let getPort = Common.getPort;
    let instances = ADC.$instances;

    /* Board_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = ADC.defaultInstanceName + "COUNT";
%%}
/*
 *  =============================== ADC ===============================
 */

#include <ti/drivers/ADC.h>
#include <ti/drivers/adc/ADCMSP432.h>

/* include MSP432 driverlib definitions */
#include <ti/devices/msp432p4xx/inc/msp.h>
#include <ti/devices/msp432p4xx/driverlib/adc14.h>
#include <ti/devices/msp432p4xx/driverlib/ref_a.h>

#define `countDef` `instances.length`

/*
 *  ======== adcMSP432Objects ========
 */
ADCMSP432_Object adcMSP432Objects[`countDef`];

/*
 *  ======== adcMSP432HWAttrs ========
 */
const ADCMSP432_HWAttrsV1 adcMSP432HWAttrs[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % let chan = inst.adc.adcPin.$solution.devicePinName;
    % let pName = chan.substring(0,4);   /* PX.Y */
    % let ax = chan.substring(chan.lastIndexOf("A"));      /* A0-A24 */
    % let px = pName.substr(0, 2);     /* PX */
    % let py = pName.substr(3, 1);     /* Y */
    % let vRef = "";
    % switch (inst.refVoltage) {
    %     case "1.2V":
    %         vRef = "INT_1_2V";
    %         break;
    %     case "1.45V":
    %         vRef = "INT_1_45V";
    %         break;
    %     case "2.5V":
    %         vRef = "INT_2_5V";
    %         break;
    %     case "External":
    %         vRef = "EXT";
    %         break;
    %     case "External Buffered":
    %         vRef = "EXT_BUF";
    %         break;
    %     case "VDD":
    %         vRef = "VDD";
    %         break;
    % };
    % let res = "";
    % switch (inst.resolution) {
    %     case "8 Bits":
    %         res = "ADC_8BIT";
    %         break;
    %     case "10 Bits":
    %         res = "ADC_10BIT";
    %         break;
    %     case "12 Bits":
    %         res = "ADC_12BIT";
    %         break;
    %     case "14 Bits":
    %         res = "ADC_14BIT";
    %         break;
    % };
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .adcPin = ADCMSP432_`px`_`py`_`ax`,
        .refVoltage = ADCMSP432_REF_VOLTAGE_`vRef`,
        .resolution = `res`
    },
% }
};

/*
 *  ======== ADC_config ========
 */
const ADC_Config ADC_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % let name = inst.$name;
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .fxnTablePtr = &ADCMSP432_fxnTable,
        .object = &adcMSP432Objects[`name`],
        .hwAttrs = &adcMSP432HWAttrs[`name`]
    },
% }
};

const uint_least8_t ADC_count = `countDef`;
