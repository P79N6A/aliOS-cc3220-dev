%%{
    let SPI = args[0]; /* passed by /ti/drivers/templates/Board.c.xdt */

    /* get ti/drivers common utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    /* localize the object names with this device ID */
    let devId = system.deviceData.deviceId;

    /* shorthand names for some common references in template below */
    let getPort = Common.getPort;
    let instances = SPI.$instances;

    /* Board_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = SPI.defaultInstanceName + "COUNT";

    if (false) {
        for (let i = 0; i < instances.length; i++) {
            let inst = instances[i];
            console.log("inst " + inst.$name + "resources:");
            Common.printPins(inst.spiData);
        }
    }

    /* insert leading '0' for pin numbers less than 10 */
    function addLeadingZero(pin)
    {
        if (pin.length == 1) {
            pin = "0" + pin;
        }
        return (pin);
    }
%%}
/*
 *  =============================== SPI ===============================
 */

#include <ti/drivers/SPI.h>
#include <ti/drivers/spi/SPICC32XXDMA.h>

/* include CC32XX driverlib definitions */
#include <ti/devices/cc32xx/inc/hw_ints.h>
#include <ti/devices/cc32xx/inc/hw_memmap.h>
#include <ti/devices/cc32xx/inc/hw_types.h>

#include <ti/devices/cc32xx/driverlib/prcm.h>
#include <ti/devices/cc32xx/driverlib/spi.h>
#include <ti/devices/cc32xx/driverlib/udma.h>

#define `countDef` `instances.length + 1`

/*
 *  ======== spi`devId`DMAObjects ========
 */
SPICC32XXDMA_Object spi`devId`DMAObjects[`countDef`];

#if defined(__TI_COMPILER_VERSION__)
#pragma DATA_ALIGN(spi`devId`SDMAscratchBuf, 32)
#elif defined(__IAR_SYSTEMS_ICC__)
#pragma data_alignment=32
#elif defined(__GNUC__)
__attribute__ ((aligned (32)))
#endif
uint32_t spi`devId`SDMAscratchBuf[`countDef`];

/*
 *  ======== spi`devId`DMAHWAttrs ========
 */
const SPICC32XXDMA_HWAttrsV1 spi`devId`DMAHWAttrs[`countDef`] = {
    /* Board_NWP_SPI */
    /* Network Processor SPI Bus */
    {
        .baseAddr = LSPI_BASE,
        .intNum = INT_LSPI,
        .intPriority = `Common.intPriority2Hex(instances.length > 0 ? instances[0].intPriority : null)`,
        .spiPRCM = PRCM_LSPI,
        .csControl = SPI_SW_CTRL_CS,
        .csPolarity = SPI_CS_ACTIVEHIGH,
        .pinMode = SPI_4PIN_MODE,
        .turboMode = SPI_TURBO_OFF,
        .scratchBufPtr = &spi`devId`SDMAscratchBuf[0],
        .defaultTxBufValue = 0,
        .rxChannelIndex = UDMA_CH12_LSPI_RX,
        .txChannelIndex = UDMA_CH13_LSPI_TX,
        .minDmaTransferSize = 100,
        .mosiPin = SPICC32XXDMA_PIN_NO_CONFIG,
        .misoPin = SPICC32XXDMA_PIN_NO_CONFIG,
        .clkPin  = SPICC32XXDMA_PIN_NO_CONFIG,
        .csPin  = SPICC32XXDMA_PIN_NO_CONFIG
    },
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    %
    % /* resources is a hash of resources assigned to inst: CLK, MISO, MOSI ... */
    % let spi = inst.spi;
    % let csPin;
    % let name = spi.simoPin.$solution.peripheralPinName.substring(0,4); /* GSPI, LSPI */
    % let mode = inst.mode == "Three Pin" ? "3PIN" : "4PIN";
    % let ctl = inst.mode == "Three Pin" ? "SW" : "HW";
    % let csPol = inst.mode.match("high") ? "HIGH" : "LOW";
    % let trbo = inst.tMode == "Enabled" ? "ON" : "OFF";
    % let rdmach = spi.dmaRxChannel.$solution.devicePinName.substring(7); /* UDMA_CHXX */
    % let tdmach = spi.dmaTxChannel.$solution.devicePinName.substring(7); /* UDMA_CHXX */
    % let clkPin = addLeadingZero(spi.clkPin.$solution.packagePinName);
    % let mosiPin = addLeadingZero(spi.simoPin.$solution.packagePinName);
    % let misoPin = addLeadingZero(spi.somiPin.$solution.packagePinName);
    % if (inst.mode !== "Three Pin") {
    %     csPin = addLeadingZero(spi.csPin.$solution.packagePinName);
    % }
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .baseAddr = `name`_BASE,
        .intNum = INT_`name`,
        .intPriority = `Common.intPriority2Hex(inst.intPriority)`,
        .spiPRCM = PRCM_`name`,
        .csControl = SPI_`ctl`_CTRL_CS,
        .csPolarity = SPI_CS_ACTIVE`csPol`,
        .pinMode = SPI_`mode`_MODE,
        .turboMode = SPI_TURBO_`trbo`,
        .scratchBufPtr = &spi`devId`SDMAscratchBuf[`i+1`],
        .defaultTxBufValue = `inst.defaultTxBufValue`,
        .rxChannelIndex = UDMA_CH`rdmach`_`name`_RX,
        .txChannelIndex = UDMA_CH`tdmach`_`name`_TX,
        .minDmaTransferSize = `inst.minDmaTransferSize`,
        .mosiPin = SPICC32XXDMA_PIN_`mosiPin`_MOSI,
        .misoPin = SPICC32XXDMA_PIN_`misoPin`_MISO,
        .clkPin  = SPICC32XXDMA_PIN_`clkPin`_CLK,
    % if (inst.mode != "Three Pin") {
        .csPin  = SPICC32XXDMA_PIN_`csPin`_CS
    % }
    },
% }
};

/*
 *  ======== SPI_config ========
 */
const SPI_Config SPI_config[`countDef`] = {
    {
        .fxnTablePtr = &SPICC32XXDMA_fxnTable,
        .object = &spi`devId`DMAObjects[Board_NWP_SPI],
        .hwAttrs = &spi`devId`DMAHWAttrs[Board_NWP_SPI]
    },
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % let name = inst.$name;
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .fxnTablePtr = &SPICC32XXDMA_fxnTable,
        .object = &spi`devId`DMAObjects[`name`],
        .hwAttrs = &spi`devId`DMAHWAttrs[`name`]
    },
% }
};

const uint_least8_t SPI_count = `countDef`;
