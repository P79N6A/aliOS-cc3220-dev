%%{
    let SPI = args[0]; /* passed by /ti/drivers/templates/Board.c.xdt */

    /* get ti/drivers common utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    /* shorthand names for some common references in template below */
    let getPort = Common.getPort;
    let instances = SPI.$instances;

    /* Board_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = SPI.defaultInstanceName + "COUNT";

    let pinModeMapping = {
        "Three Pin"                    : "EUSCI_SPI_3PIN",
        "Four Pin, Select active high" : "EUSCI_SPI_4PIN_UCxSTE_ACTIVE_HIGH",
        "Four Pin, Select active low"  : "EUSCI_SPI_4PIN_UCxSTE_ACTIVE_LOW"
    };

    function choice(ch, Bn) {
        return (4 + (ch >>> 1) - Bn) % 4;
    }
%%}
/*
 *  =============================== SPI ===============================
 */

#include <ti/drivers/SPI.h>
#include <ti/drivers/spi/SPIMSP432DMA.h>

/* include MSP432 driverlib definitions */
#include <ti/devices/msp432p4xx/inc/msp.h>
#include <ti/devices/msp432p4xx/driverlib/dma.h>
#include <ti/devices/msp432p4xx/driverlib/interrupt.h>
#include <ti/devices/msp432p4xx/driverlib/spi.h>

#define `countDef` `instances.length`

/*
 *  ======== spiMSP432DMAObjects ========
 */
SPIMSP432DMA_Object spiMSP432DMAObjects[`countDef`];

/*
 *  ======== spiMSP432DMAHWAttrs ========
 */
const SPIMSP432DMA_HWAttrsV1 spiMSP432DMAHWAttrs[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    %
    % /* resources is a hash of resources assigned to inst: CLK, SOMI, SIMO ... */
    % let spi = inst.spi;
    %
    % /* name is the peripheral name: EUSCI_A<num> or EUSCI_B<num> ... */
    % let name = inst.spi.$solution.peripheralName;
    % let type = name.substring(0, 7); /* EUSCI_A or EUSCI_B or ... */
    % let id = name.substring(6);      /* A0 or A1 or B0 or ... */
    % let rxDmaCh = spi.dmaRxChannel.$solution.devicePinName.substring(6);
    % let txDmaCh = spi.dmaTxChannel.$solution.devicePinName.substring(6);
    % let rxDmaChId = id.substring(0,1) == "A" ? "" : choice(rxDmaCh, id.substring(1));
    % let txDmaChId = id.substring(0,1) == "A" ? "" : choice(txDmaCh, id.substring(1));
    % let dmaIntNum = spi.dmaIntNum.$solution.devicePinName;
    % let clkPin = getPort(spi.clkPin);
    %
    % let simoPin;
    % let somiPin;
    % if (inst.duplex == "full") {
    %     simoPin = "SPIMSP432DMA_" + getPort(spi.simoPin) + "_UC" + id + "SIMO";
    %     somiPin = "SPIMSP432DMA_" + getPort(spi.somiPin) + "_UC" + id + "SOMI";
    % }
    % else if (inst.duplex == "rxOnly") {
    %     somiPin = "SPIMSP432DMA_" + getPort(spi.somiPin) + "_UC" + id + "SOMI";
    %     simoPin = "SPIMSP432DMA_PIN_NO_CONFIG";
    % }
    % else if (inst.duplex == "txOnly") {
    %     simoPin = "SPIMSP432DMA_" + getPort(spi.simoPin) + "_UC" + id + "SIMO";
    %     somiPin = "SPIMSP432DMA_PIN_NO_CONFIG";
    % }
    %
    % let stePin;
    % if (inst.mode !== "Three Pin") {
    %     stePin = getPort(spi.csPin);
    % }
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .baseAddr = `name`_BASE,
        .bitOrder = `type`_SPI_MSB_FIRST,
        .clockSource = `type`_SPI_CLOCKSOURCE_SMCLK,
        .defaultTxBufValue = `inst.defaultTxBufValue`,
        .intPriority = `Common.intPriority2Hex(inst.intPriority)`,
        .dmaIntNum = INT_`dmaIntNum`,
        .rxDMAChannelIndex = DMA_CH`rxDmaCh`_EUSCI`id`RX`rxDmaChId`,
        .txDMAChannelIndex = DMA_CH`txDmaCh`_EUSCI`id`TX`txDmaChId`,
        .pinMode = `pinModeMapping[inst.mode]`,
        .clkPin  = SPIMSP432DMA_`clkPin`_UC`id`CLK,
        .simoPin = `simoPin`,
        .somiPin = `somiPin`,
    % if (inst.mode != "Three Pin") {
        .stePin  = SPIMSP432DMA_`stePin`_UC`id`STE,
    % }
        .minDmaTransferSize = `inst.minDmaTransferSize`,
    },
% }
};

/*
 *  ======== SPI_config ========
 */
const SPI_Config SPI_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % let name = inst.$name;
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .fxnTablePtr = &SPIMSP432DMA_fxnTable,
        .object = &spiMSP432DMAObjects[`name`],
        .hwAttrs = &spiMSP432DMAHWAttrs[`name`]
    },
% }
};

const uint_least8_t SPI_count = `countDef`;
