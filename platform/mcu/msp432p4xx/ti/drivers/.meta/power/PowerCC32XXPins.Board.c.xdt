%%{
let parkPins = args[0].$instances[0];
function padStart(x)
{
    if (x < 10) x = "0" + x;
    return x
}
%%}
#include <ti/drivers/power/PowerCC32XX.h>

/*
 * This table defines the parking state to be set for each parkable pin
 * during LPDS. (Device resources must be parked during LPDS to achieve maximum
 * power savings.)  If the pin should be left unparked, specify the state
 * PowerCC32XX_DONT_PARK.  For example, for a UART TX pin, the device
 * will automatically park the pin in a high state during transition to LPDS,
 * so the Power Manager does not need to explictly park the pin.  So the
 * corresponding entries in this table should indicate PowerCC32XX_DONT_PARK.
 */
PowerCC32XX_ParkInfo parkInfo[] = {
/*        PIN                    PARK STATE              Pin Alias
   -----------------  ------------------------------     ---------------*/

%    for (let i = 1; i <= 64; ++i) {
%      let name = 'PIN'+padStart(i.toString());
%      if (parkPins.hasOwnProperty(name)) {
%          try {
%              let comment = system.deviceData.devicePins[i.toString()].designSignalName;
  {PowerCC32XX_`name`, PowerCC32XX_`parkPins[name]`},   /* `comment` */
%          }
%          catch (err) {
  {PowerCC32XX_`name`, PowerCC32XX_`parkPins[name]`},
%          }
%      }
%    }
};
