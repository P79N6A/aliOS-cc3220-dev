%%{
    let POWER                 = args[0];
    let Common                = system.getScript("/ti/drivers/Common.js");
    let pow                   = POWER.$static;
    let enablePolicy          = pow.enablePolicy;
    let enablePerf            = pow.enablePerf;
    let resumeShutdownHookFxn = pow.resumeShutdownHookFxn;

    let enableParking    = enablePolicy ? pow.enableParking : false;
    let policyInitFxn    = enablePolicy ? pow.policyInitFxn : 'NULL';
    let policyFxn        = enablePolicy ? pow.policyFxn     : 'NULL';
    let initialPerfLevel = enablePerf ? pow.initialPerfLevel : 0;
    let customLevels     = enablePerf ? pow.customLevels : 0;
    let predefLevels     = 4;
    let useExtendedPerf  = pow.useExtendedPerf;
    let onHFXT           = useExtendedPerf ? pow.configurePinHFXT : false;
    let hfxtFreq         = onHFXT ? freqNameHFXT(pow.HFXTFREQ) : '0';
    let bypassHFXT       = onHFXT ? pow.bypassHFXT : false;
    let onLFXT           = useExtendedPerf ? pow.configurePinLFXT : false;
    let bypassLFXT       = onLFXT ? pow.bypassLFXT : false;
    let LFXTDRIVE        = onLFXT ? pow.LFXTDRIVE  : 0;
    let isrCS            = pow.isrCS;
    let intrCS           = (isrCS !== 'NULL');
    let priCS            = intrCS ? pow.priorityInterruptsCS : 'default';
    let customLevName    = (customLevels > 0) ? 'customPerfLevels' :'NULL';

    priCS = (priCS === 'default') ? '(~0)' : priCS;

    if (resumeShutdownHookFxn == '') {
       resumeShutdownHookFxn = 'NULL';
    }

    if (isrCS == '' || !useExtendedPerf) {
        isrCS = 'NULL';
    }

    if (policyInitFxn === 'Custom') {
        policyInitFxn = pow.policyInitFxnCustom;
    }

    if (policyFxn === 'Custom') {
        policyFxn = pow.policyFxnCustom;
    }

    function freqNameDCO(freq) {
        if (freq == 1500000) {
            return 'CS_DCO_FREQUCNCY_1_5';
        }
        freq /= 1000000;
        return 'CS_DCO_FREQUENCY_' + freq;
    }

    function selectName(clk) {
        if (clk == 'MODOSC') {
            return 'CS_MODOSC_SELECT';
        }
        return 'CS_' + clk + 'CLK_SELECT';
    }

    function freqNameHFXT(freq) {
        if (freq == 0) {
            return freq;
        }
        if (freq == 1500000) {
            return 'CS_15MHZ';
        }

        freq /= 1000000;
        return 'CS_' + freq + 'MHZ';
    }
%%}
/*
 *  =============================== Power ===============================
 */

#include <ti/drivers/Power.h>
#include <ti/drivers/power/PowerMSP432.h>

% if (customLevels > 0) {
#include <ti/devices/msp432p4xx/driverlib/cs.h>
#include <ti/devices/msp432p4xx/driverlib/pcm.h>

PowerMSP432_PerfLevel customPerfLevels[] = {
% for (let lev = predefLevels; lev < (predefLevels + customLevels); lev++) {
%    let levName = 'perfLevel'+lev;
%    let levDef  = pow[levName];
%    let dcoName = freqNameDCO(levDef.DCORESEL);
%    let selm    = selectName(levDef.SELM);
%    let sels    = selectName(levDef.SELS);
%    let selb    = selectName(levDef.SELB);
%    let sela    = selectName(levDef.SELA);
    {
        .activeState       = PCM_AM_`levDef.activeState`_VCORE`levDef.VCORE`,
        .VCORE             = `levDef.VCORE`,
        .DCORESEL          = `dcoName`,
        .SELM              = `selm`,
        .DIVM              = CS_CLOCK_DIVIDER_`levDef.DIVM`,
        .SELS              = `sels`,
        .DIVHS             = CS_CLOCK_DIVIDER_`levDef.DIVHS`,
        .DIVS              = CS_CLOCK_DIVIDER_`levDef.DIVS`,
        .SELB              = `selb`,
        .SELA              = `sela`,
        .DIVA              = CS_CLOCK_DIVIDER_`levDef.DIVA`,
        .flashWaitStates   = `levDef.flashWaitStates`,
        .enableFlashBuffer = `levDef.enableFlashBuffer`,
        .MCLK              = `levDef.MCLK`,
        .HSMCLK            = `levDef.HSMCLK`,
        .SMCLK             = `levDef.SMCLK`,
        .BCLK              = `levDef.BCLK`,
        .ACLK              = `levDef.ACLK`
    },
% }
};
% }

% if (policyInitFxn !== 'NULL') {
extern void `policyInitFxn`(void);
% }
% if (policyFxn !== 'NULL') {
extern void `policyFxn`(void);
% }
% if (resumeShutdownHookFxn !== 'NULL') {
extern void `resumeShutdownHookFxn`(void);
% }
% if (isrCS !== 'NULL') {
extern void `isrCS`(void);
% }

const PowerMSP432_ConfigV1 PowerMSP432_config = {
    .policyInitFxn         = `policyInitFxn`,
    .policyFxn             = `policyFxn`,
    .initialPerfLevel      = `initialPerfLevel`,
    .enablePolicy          = `enablePolicy`,
    .enablePerf            = `enablePerf`,
    .enableParking         = `enableParking`,
    .resumeShutdownHookFxn = `resumeShutdownHookFxn`,
    .customPerfLevels      = `customLevName`,
    .numCustom             = `customLevels`,
    .useExtendedPerf       = `useExtendedPerf`,
    .configurePinHFXT      = `onHFXT`,
    .HFXTFREQ              = `hfxtFreq`,
    .bypassHFXT            = `bypassHFXT`,
    .configurePinLFXT      = `onLFXT`,
    .bypassLFXT            = `bypassLFXT`,
    .LFXTDRIVE             = `LFXTDRIVE`,
    .enableInterruptsCS    = `intrCS`,
    .priorityInterruptsCS  = `priCS`,
    .isrCS                 = `isrCS`
};
