%%{
    let NVS = args[0]; /* passed by /ti/drivers/templates/Board.c.xdt */
    let instances   = NVS.$instances;
    let localInstances = [];

    /* collect RAM instances */
    for (let i = 0; i < instances.length; i++) {
        if (instances[i].nvsType == "RAM") {
            localInstances[localInstances.length] = instances[i];
        }
    }

    if (localInstances.length == 0) return;
%%}

#include <ti/drivers/nvs/NVSRAM.h>

/*
 *  NVSRAM Internal RAM region definitions
 */

/*
 * Place 'ramBuf' char arrays at addresses
 * corresponding to the 'regionBase' addresses defined in
 * the configured NVS regions. These arrays are used as
 * place holders so that the linker will not place other
 * content there.
 *
 * For GCC targets with explicitly placed regions,
 * the 'ramBuf' arrays are each placed into
 * the shared ".nvs" section. The user must add content to
 * their GCC linker command file to place the .nvs section
 * at the lowest 'regionbase' address specified in their NVS
 * regions.
 */

#if defined(__TI_COMPILER_VERSION__)

% for (let i = 0; i < localInstances.length; i++) {
%     let inst = localInstances[i];
%     if (inst.ramFlash.regionBase == "") {
#pragma DATA_ALIGN(ramBuf`i`, 0x`Number(inst.ramFlash.sectorSize).toString(16)`)
%     }
%     else {
#pragma LOCATION(ramBuf`i`, 0x`Number(inst.ramFlash.regionBase).toString(16)`)
%     }
static char ramBuf`i`[`inst.ramFlash.regionSize`];

% }
#elif defined(__IAR_SYSTEMS_ICC__)

% for (let i = 0; i < localInstances.length; i++) {
%     let inst = localInstances[i];
%     if (inst.ramFlash.regionBase == "") {
#pragma data_alignment=0x`Number(inst.ramFlash.sectorSize).toString(16)`
static char ramBuf`i`[`inst.ramFlash.regionSize`];
%     }
%     else {
static char ramBuf`i`[`inst.ramFlash.regionSize`] @ 0x`Number(inst.ramFlash.regionBase).toString(16)`;
%     }
% }

#elif defined(__GNUC__)

/*
 * placement of these buffers per the .regionBase settings
 * requires corresponding linker command file content.
 */

% for (let i = 0; i < localInstances.length; i++) {
%     let inst = localInstances[i];
%     if (inst.ramFlash.regionBase == "") {
__attribute__ ((aligned (0x`Number(inst.ramFlash.sectorSize).toString(16)`)))
static char ramBuf`i`[`inst.ramFlash.regionSize`];
%     }
%     else {
__attribute__ ((section (".nvs")))
static char ramBuf`i`[`inst.ramFlash.regionSize`];  /* place at `inst.ramFlash.regionBase` */
%     }
% }

#endif

NVSRAM_Object nvsRAMObjects[`localInstances.length`];

static const NVSRAM_HWAttrs nvsRAMHWAttrs[`localInstances.length`] = {
% for (let i = 0; i < localInstances.length; i++) {
    % let inst = localInstances[i];
    /* `inst.$name` */
    {
        .regionBase = ramBuf`i`,
        .regionSize = `inst.ramFlash.regionSize`,
        .sectorSize = `inst.ramFlash.sectorSize`
    },
% }
};
