%%{
    let NVS = args[0]; /* passed by /ti/drivers/templates/Board.c.xdt */
    /* get Common /ti/drivers utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");
    let instances   = NVS.$instances;
    let localInstances = [];
    let maxVerifyBufSize = 0;
    let spiHandles = []; /* map to identify spiHandle uniqueness */
    let spiHandleNames = []; /* array of unique spiHandle names */

    /* collect external flash instances */
    for (let i = 0; i < instances.length; i++) {
        let inst = instances[i];
        if (inst.nvsType == "External") {
            localInstances[localInstances.length] = inst;

            if ((Number(inst.spiFlash.verifyBufSize) > maxVerifyBufSize)) {
                maxVerifyBufSize = Number(inst.spiFlash.verifyBufSize);
            }

            if (inst.spiFlash.spiDevice.spiManager == "User") {
                if ((inst.spiFlash.spiDevice.spiHandle != "NULL") && (inst.spiFlash.spiDevice.spiHandle != "")) {
                    /* save unique spiHandle names */
                    if (spiHandles[inst.spiFlash.spiDevice.spiHandle] == null) {
                        spiHandles[inst.spiFlash.spiDevice.spiHandle] = 1;
                        spiHandleNames[spiHandleNames.length] = inst.spiFlash.spiDevice.spiHandle;
                    }
                }
            }
        }
    }

    if (localInstances.length == 0) return;
%%}

#include <ti/drivers/nvs/NVSSPI25X.h>

/*
 *  NVSSPI25X External NVS flash region definitions
 */
% if (spiHandleNames.length) {

%     for (let i = 0; i < spiHandleNames.length; i++) {
extern SPI_Handle `spiHandleNames[i]`;   /* User provided SPI handle */
%     }
% }
% if (maxVerifyBufSize) {

/*
 * Provide write verification buffer whose size is
 * the largest specified Verification Buffer Size
 */

static uint8_t verifyBuf[`maxVerifyBufSize`];

% }
% else {

% }
NVSSPI25X_Object nvsSPI25XObjects[`localInstances.length`];

static const NVSSPI25X_HWAttrs nvsSPI25XHWAttrs[`localInstances.length`] = {
% for (let i = 0; i < localInstances.length; i++) {
%     let inst = localInstances[i];
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .regionBaseOffset = `inst.spiFlash.regionBaseOffset`,
        .regionSize = `inst.spiFlash.regionSize`,
        .sectorSize = `inst.spiFlash.sectorSize`,
    % if (Number(inst.spiFlash.verifyBufSize)) {
        .verifyBuf = verifyBuf,
    % }
    % else {
        .verifyBuf = NULL,
    % }
        .verifyBufSize = `inst.spiFlash.verifyBufSize`,
    % if (inst.spiFlash.spiDevice.spiManager == "NVS") {
        /* NVS opens SPI */
        .spiHandle = NULL,
        /* SPI driver index */
        .spiIndex = `inst.spiFlash.spiDevice.spiInstance.$name`,
        .spiBitRate = `inst.spiFlash.spiDevice.spiBitRate`,
    % }
    % else {
        /* User opens SPI */
        .spiHandle = &`inst.spiFlash.spiDevice.spiHandle`,
    % }
    % if (inst.spiFlash.spiDevice.spiCsManager == "NVS") {
        /* GPIO driver pin index */
        .spiCsnGpioIndex = `inst.spiFlash.spiDevice.spiCsnGpioInstance.$name`,
    % }
    % else {
        /* SPI driver manages SPI flash CS */
        .spiCsnGpioIndex = NVSSPI25X_SPI_MANAGES_CS,
    % }
    },
% }
};
