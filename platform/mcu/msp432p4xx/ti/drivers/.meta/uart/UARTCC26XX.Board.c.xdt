%%{
    let Common    = system.getScript("/ti/drivers/Common.js");

    let UART      = args[0];
    let instances = UART.$instances;

    /* Board_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = UART.defaultInstanceName + "COUNT";
    let numInstances = instances.length;

    /* localize the object names with this device ID */
    let devId = system.deviceData.deviceId;
    let devFamily = Common.device2DeviceFamily(devId);

    /* Get name of device specific include directory */
    let devicesDir = Common.device2DevicesDir(devId);

    let attrsVer = '';
    let powerMngrId0 = 'PowerCC26XX_PERIPH_UART0';
    let powerMngrId1 = 'PowerCC26X2_PERIPH_UART1';
    let powerDriver = '';

    let driver = "";  /* String to attach to "UART" for driver name */
    if (devId.match(/CC13.2/) || devId.match(/CC26.2/)) {
        /* Not ready to shift over to CC26X2 yet */
        driver = 'CC26XX';
        attrsVer = 'V2';
        powerDriver = 'CC26X2';
    }
    else {
        driver = 'CC26XX';
        attrsVer = 'V2';
        powerDriver = 'CC26XX';
    }
%%}
/*
 *  =============================== UART ===============================
 */

#include <ti/drivers/UART.h>
#include <ti/drivers/uart/UART`driver`.h>
#include <ti/drivers/Power.h>
#include <ti/drivers/power/Power`powerDriver`.h>
#include <ti/devices/`devicesDir`/inc/hw_memmap.h>
#include <ti/devices/`devicesDir`/inc/hw_ints.h>

#define `countDef` `instances.length`

UART`driver`_Object uart`driver`Objects[`countDef`];

% for (let i = 0; i < numInstances; i++) {
%     let inst = instances[i];
static unsigned char uart`driver`RingBuffer`i`[`inst.ringBufSize`];
% }

% for (let i = 0; i < numInstances; i++) {
%     let inst = instances[i];
%     if(inst.errorFxn != '') {
extern void `inst.errorFxn`(UART_Handle, uint32_t);

%     }
% }
%
static const UART`driver`_HWAttrs`attrsVer` uart`driver`HWAttrs[`countDef`] = {
% for (let i = 0; i < numInstances; i++) {
%     let inst        = instances[i];
%     let uart        = inst.uart;
%     let solution    = uart.$solution;
%     let errorFxn    = inst.errorFxn;
%     if (errorFxn == '') {
%         errorFxn = 'NULL';
%     }
%     let peripheral  = system.deviceData.peripherals[solution.peripheralName];
%     let rxPinName   = 'PIN_UNASSIGNED';
%     let txPinName   = 'PIN_UNASSIGNED';
%     let ctsPinName  = 'PIN_UNASSIGNED';
%     let rtsPinName  = 'PIN_UNASSIGNED';
%     if ('rxPin' in uart) {
%         /* Replace 'DIO' with 'IOID' */
%         rxPinName =  'IOID' + uart.rxPin.$solution.devicePinName.substring(3);
%     }
%     if ('txPin' in uart) {
%         txPinName =  'IOID' + uart.txPin.$solution.devicePinName.substring(3);
%     }
%
%     let flowName;
%     if (inst.flowControl === false) {
%         flowName = 'UART' + driver + '_FLOWCTRL_NONE';
%     }
%     else {
%         ctsPinName    = 'IOID' + uart.ctsPin.$solution.devicePinName.substring(3);
%         rtsPinName    = 'IOID' + uart.rtsPin.$solution.devicePinName.substring(3);
%         flowName      = 'UART' + driver + '_FLOWCTRL_HARDWARE';
%     }
  {
    .baseAddr           = `peripheral.name`_BASE,
    .intNum             = INT_`peripheral.name`_COMB,
    .intPriority        = `Common.intPriority2Hex(inst.intPriority)`,
    .swiPriority        = `Common.swiPriority2Int(inst.swiPriority)`,
% if (peripheral.name.match(/UART1/)) {
    .powerMngrId        = `powerMngrId1`,
% }
% else {
    .powerMngrId        = `powerMngrId0`,
% }
    .ringBufPtr         = uart`driver`RingBuffer`i`,
    .ringBufSize        = sizeof(uart`driver`RingBuffer`i`),
    .rxPin              = `rxPinName`,
    .txPin              = `txPinName`,
    .ctsPin             = `ctsPinName`,
    .rtsPin             = `rtsPinName`,
    .txIntFifoThr       = UART`driver`_`inst.txIntFifoThr.toUpperCase()`,
    .rxIntFifoThr       = UART`driver`_`inst.rxIntFifoThr.toUpperCase()`,
    .errorFxn           = `errorFxn`
  },
% }
};

const UART_Config UART_config[`countDef`] = {
% for (let i = 0; i < numInstances; i++) {
%     let inst    = instances[i];
    {   // `inst.$name`
        .fxnTablePtr = &UART`driver`_fxnTable,
        .object      = &uart`driver`Objects[`i`],
        .hwAttrs     = &uart`driver`HWAttrs[`i`]
    },
% }
};

const uint_least8_t UART_count = `countDef`;
