%%{
    let SDSPI = args[0]; /* passed by /ti/drivers/templates/Board.c.xdt */

    /* get ti/drivers common utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    /* localize the object names with this device ID */
    let devId = system.deviceData.deviceId;

    /* shorthand names for some common references in template below */
    let getPort = Common.getPort;
    let instances = SDSPI.$instances;

    /* Board_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = SDSPI.defaultInstanceName + "COUNT";

    /* insert leading '0' for pin numbers less than 10 */
    function addLeadingZero(pin)
    {
        if (pin.length == 1) {
            pin = "0" + pin;
        }
        return (pin);
    }
%%}
/*
 *  =============================== SDSPI ===============================
 */

#include <ti/drivers/SDSPI.h>
#include <ti/drivers/Power.h>
#include <ti/drivers/sdspi/SDSPICC32XX.h>

#include <ti/devices/cc32xx/inc/hw_ints.h>
#include <ti/devices/cc32xx/inc/hw_memmap.h>
#include <ti/devices/cc32xx/inc/hw_types.h>

#include <ti/devices/cc32xx/driverlib/prcm.h>
#include <ti/devices/cc32xx/driverlib/spi.h>
#include <ti/devices/cc32xx/driverlib/udma.h>

#define `countDef` `instances.length`

/*
 *  ======== sdspi`devId`Objects ========
 */
SDSPICC32XX_Object sdspi`devId`Objects[`countDef`];

/*
 *  ======== sdspi`devId`HWAttrs ========
 */
const SDSPICC32XX_HWAttrsV1 sdspi`devId`HWAttrs[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    %
    %  /* resources is a hash of resources assigned to inst: CLK, SOMI, SIMO ... */
    %  let spi = inst.spi;
    %
    %  /* name is the peripheral name: EUSCI_A<num> or EUSCI_B<num> ... */
    %  let name = inst.spi.$solution.peripheralName;
    %  let type = name.substring(0, 7); /* EUSCI_A or EUSCI_B or ... */
    %  let id = name.substring(6);      /* A0 or A1 or B0 or ... */
    %  let rxDmaCh = (Number(id.substring(1)) * 2) + 1;
    %  let txDmaCh = (Number(id.substring(1)) * 2);
    %  let dmaChId = id.substring(0,1) == "A" ? "" : "0";
    %  let clkPin = addLeadingZero(spi.clkPin.$solution.packagePinName);
    %  let misoPin = addLeadingZero(spi.somiPin.$solution.packagePinName);
    %  let mosiPin = addLeadingZero(spi.simoPin.$solution.packagePinName);
    %  let gpioPin = inst.gpioPin;
    %  let csPin = gpioPin.$solution.packagePinName;
    {
        .baseAddr = GSPI_BASE,
        .spiPRCM = PRCM_GSPI,

        /* CLK, MOSI, MISO portts and resources */
        .clkPin  = SDSPICC32XX_PIN_`clkPin`_CLK,
        .mosiPin = SDSPICC32XX_PIN_`mosiPin`_MOSI,
        .misoPin = SDSPICC32XX_PIN_`misoPin`_MISO,

        /* Chip select port & pin */
        .csPin  = SDSPICC32XX_GPIO`csPin`
    },
% }
};

/*
 *  ======== SPI_config ========
 */
const SDSPI_Config SDSPI_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % let name = inst.$name;
    {
        .fxnTablePtr = &SDSPICC32XX_fxnTable,
        .object = &sdspi`devId`Objects[`name`],
        .hwAttrs = &sdspi`devId`HWAttrs[`name`]
    },
% }
};

const uint_least8_t SDSPI_count = `countDef`;
