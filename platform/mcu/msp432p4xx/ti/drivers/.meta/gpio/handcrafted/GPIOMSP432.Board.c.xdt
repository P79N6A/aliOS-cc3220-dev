%%{
    /*  pass GPIO in the arguments! args[] */

    var GPIO = args[0]; // was system.modules["/ti/drivers/GPIO.js"];

    var instances = GPIO.$instances;
    for (var i = 0; i < instances.length; i++) {
        var inst = instances[i];
        console.log(i + ": " + inst.cName);

        var solution    = inst.pmux.$solution;
        var resources        = inst.pmux.$resources;
        var peripheral  = system.deviceData.peripherals[solution.peripheralName];
        console.log("    solution.peripheralName = " + solution.peripheralName);
        console.log("    peripheral.name = " + peripheral.name);
        for (var p in resources) {
            console.log("      resources." + p + " = " + resources[p]);
            console.log("      resources." + p + ".$solution.devicePinName = "
                        + resources[p].$solution.devicePinName);
        }
    }
%%}
/*
 *  =============================== GPIO ===============================
 */
#include <ti/drivers/GPIO.h>
#include <ti/drivers/gpio/GPIOMSP432.h>

/*
 * Array of Pin configurations
 * NOTE: The order of the pin configurations must coincide with what was
 *       defined in MSP_EXP432P401R.h
 * NOTE: Pins not used for interrupts should be placed at the end of the
 *       array.  Callback entries can be omitted from callbacks array to
 *       reduce memory usage.
 *
 *   GACK!!!!:
 *   ti/drivers/net/wifi/porting/cc_pal.c
 *       #define MSP_EXP432P401R_HOST_IRQ (2)        // Board P2.5
 *       #define MSP_EXP432P401R_nHIB_pin (5)        // Board P4.1
 *       #define MSP_EXP432P401R_CS_pin   (6)        // Board P3.0
 *
 */
GPIO_PinConfig gpioPinConfigs[] = {
    /* ======== Input resources ========
     * NOTE: Only ports 1-6 can be "interrupting" input resources.  For example,
     *       GPIOMSP432_P10_0 does NOT trigger an interrupt, but it can be
     *       used for input (via polling).
     *
     * NOTE: Specifying FALLING edge triggering for these buttons ensures the
     *       interrupts are signaled immediately.  See the description of the
     *       PowerMSP432 driver's automatic pin parking feature for this
     *       rationale.
     */
    /* Board_GPIO_S1, P1.1 = BoosterPack non-header */
    GPIOMSP432_P1_1 | GPIO_CFG_IN_PU | GPIO_CFG_IN_INT_FALLING,

    /* Board_GPIO_S2, P1.4 = BoosterPack non-header (wlan_cmd.c: must be index LPDS_WAKEUP_SW (== 1)!! */
    GPIOMSP432_P1_4 | GPIO_CFG_IN_PU | GPIO_CFG_IN_INT_FALLING,

    /* Board_HOST_IRQ, P2.5 = BoosterPack PWM output!!! (NWP: MUST be index 2!) */
    GPIOMSP432_P2_5 | GPIO_CFG_IN_PD | GPIO_CFG_IN_INT_RISING,

    /* Board_GPIO_PX_Y, P6.2 = edge header (encoder right) */
    GPIOMSP432_P6_2 | GPIO_CFG_IN_PU | GPIO_CFG_IN_INT_FALLING,

    /* Board_GPIO_PX_Y, P6.3 = edge header (encoder left) */
    GPIOMSP432_P6_3 | GPIO_CFG_IN_PU | GPIO_CFG_IN_INT_FALLING,

    /* ======== Output resources ======== */
    /* Board_nHIB_pin, P4.1 = BoosterPack GPIO (NWP: MUST be index 5!) */
    GPIOMSP432_P4_1 | GPIO_CFG_OUT_STD | GPIO_CFG_OUT_STR_HIGH | GPIO_CFG_OUT_LOW,

   /* Board_CS_pin, P3.0 = BoosterPack wireless CS (NWP: MUST be index 6!) */
    GPIOMSP432_P3_0 | GPIO_CFG_OUT_STD | GPIO_CFG_OUT_STR_HIGH | GPIO_CFG_OUT_HIGH,

    /* Board_GPIO_LED1, P1.0 BoosterPack non-header */
    GPIOMSP432_P1_0 | GPIO_CFG_OUT_STD | GPIO_CFG_OUT_STR_HIGH | GPIO_CFG_OUT_LOW,

    /* Board_GPIO_MOTOR_RIGHT_DIR, P9.0 = edge header (right motor direction pin) */
    GPIOMSP432_P9_0 | GPIO_CFG_OUT_STD | GPIO_CFG_OUT_STR_HIGH | GPIO_CFG_OUT_LOW,

    /* Board_GPIO_MOTOR_LEFT_DIR, P9.1 = edge header (left motor direction pin) */
    GPIOMSP432_P9_1 | GPIO_CFG_OUT_STD | GPIO_CFG_OUT_STR_HIGH | GPIO_CFG_OUT_LOW,
};

/*
 *  ======== gpioCallbackFunctions ========
 *
 * Array of callback function pointers
 * NOTE: The order of the pin configurations must coincide with what was
 *       defined in Board.h
 * NOTE: Pins not used for interrupts can be omitted from callbacks array to
 *       reduce memory usage (if placed at end of gpioPinConfigs array).
 */
GPIO_CallbackFxn gpioCallbackFunctions[] = {

    NULL, /* Board_GPIO_S1 */
    NULL, /* Board_GPIO_S2 */
    NULL, /* Board_HOST_IRQ */
    NULL, /* encoder right */
    NULL, /* encoder left */
};

/*
 *  ======== GPIOMSP432_config ========
 */
const GPIOMSP432_Config GPIOMSP432_config = {
    .pinConfigs = (GPIO_PinConfig *)gpioPinConfigs,
    .callbacks = (GPIO_CallbackFxn *)gpioCallbackFunctions,
    .numberOfPinConfigs = sizeof(gpioPinConfigs)/sizeof(GPIO_PinConfig),
    .numberOfCallbacks = sizeof(gpioCallbackFunctions)/sizeof(GPIO_CallbackFxn),
    .intPriority = (~0)
};
