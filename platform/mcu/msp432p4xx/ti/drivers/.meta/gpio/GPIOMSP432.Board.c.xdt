%%{
    /* GPIO module passed in args[] */
    let GPIO = args[0];

    /* get ti/drivers common utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    /* shorthand names for some common references in template below */
    let getPort = Common.getPort;
    let getName = Common.getName;

    if (GPIO.$instances.length == 0) return;

    let instances = GPIO.$instances;

    /* generate a list of all extern references */
    let externs = [];
    let addCallback = {};
    let callbackCount = 0;
    let gpioInterruptPriority = Common.intPriority2Hex(GPIO.$static.intPriority);

    /* set 'addCallback' on all instances which require a callback */
    callbackCount = GPIO.moduleStatic.collectCallbacks(instances, externs, addCallback);

    /* sort the instances now that their 'addCallback' configs have been initialized */
    instances = GPIO.sort(GPIO.$instances, addCallback);
%%}
/*
 *  =============================== GPIO ===============================
 */

#include <ti/drivers/GPIO.h>
#include <ti/drivers/gpio/GPIOMSP432.h>

/*
 *  ======== gpioPinConfigs ========
 *  Array of Pin configurations
 */
GPIO_PinConfig gpioPinConfigs[] = {
% let pinsAreGrouped = false;
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % if ((GPIO.$static.enableSort == true) && (i == 0) && (addCallback[inst.$name] == true) && (callbackCount != 0)) {
    /* Pins with callbacks */

    % }
    % if ((GPIO.$static.enableSort == true) && (pinsAreGrouped == false) && (callbackCount != 0) && (addCallback[inst.$name] == false)) {
    %    pinsAreGrouped = true;

    /* Pins without callbacks */

    % }
    % let pin, port;
    % if (inst.mode == "Empty") {
    %     pin = "";
    %     port = "EMPTY_PIN";
    % }
    % else {
    %     pin = inst.gpioPin;
    %     port = getPort(pin); /* P1_0 ... */
    % }
    % let line = "    GPIOMSP432_" + port + " | " + GPIO.moduleStatic.getAttrs(inst) + ",";
    % line = GPIO.moduleStatic.addComment(line, inst, i, pin);
`line`
% }
};

% if (callbackCount != 0) {
/*
 *  ======== gpioCallbackFunctions ========
 *  Array of callback function pointers
% if (GPIO.$static.enableSort == false) {
 *
 *  NOTE: Unused callback entries can be omitted from the callbacks array to
 *        reduce memory usage by enabling sorting (GPIO.enableSort = true)
% }
 */
% if (externs.length > 0) {
`externs.join('\n')`

% }
GPIO_CallbackFxn gpioCallbackFunctions[] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % if (addCallback[inst.$name] == true) {
    %     let pin;
    %     if (inst.mode == "Empty") {
    %         pin = "";
    %     }
    %     else {
    %         pin = inst.gpioPin;
    %     }
    %     let callback = "    ";
    %     callback += (inst.callback == "" ? "NULL" : inst.callback) + ",";
    %     callback = GPIO.moduleStatic.addComment(callback, inst, i, pin);
`callback`
    % }
% }
};

% }
/*
 *  ======== GPIOMSP432_config ========
 */
const GPIOMSP432_Config GPIOMSP432_config = {
    .pinConfigs = (GPIO_PinConfig *)gpioPinConfigs,
% if (callbackCount != 0) {
    .callbacks = (GPIO_CallbackFxn *)gpioCallbackFunctions,
% } else {
    .callbacks = NULL,
% }
    .numberOfPinConfigs = `instances.length`,
    .numberOfCallbacks = `callbackCount`,
    .intPriority = `gpioInterruptPriority`
};