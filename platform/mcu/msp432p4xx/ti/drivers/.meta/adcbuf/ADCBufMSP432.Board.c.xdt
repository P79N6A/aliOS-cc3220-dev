%%{
    let ADCBuf = args[0]; /* passed by /ti/drivers/templates/Board.c.xdt */

    /* get ti/drivers common utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    /* shorthand names for some common references in template below */
    let getPort = Common.getPort;
    let instances = ADCBuf.$instances;

    /* Board_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = ADCBuf.defaultInstanceName + "COUNT";

    function getAdcBufPinName(chan)
    {
        let pName = chan.substring(0,4);   /* PX.Y */
        let ax = chan.substring(chan.lastIndexOf("A"));      /* A0-A24 */
        let px = pName.substr(0, 2);     /* PX */
        let py = pName.substr(3, 1);     /* Y */
        return ("ADCBufMSP432_" + px + "_" + py + "_" + ax);
    }
%%}
/*
 *  =============================== ADCBuf ===============================
 */

#include <ti/drivers/ADCBuf.h>
#include <ti/drivers/adcbuf/ADCBufMSP432.h>

/* include MSP432 driverlib definitions */
#include <ti/devices/msp432p4xx/inc/msp.h>
#include <ti/devices/msp432p4xx/driverlib/interrupt.h>
#include <ti/devices/msp432p4xx/driverlib/adc14.h>
#include <ti/devices/msp432p4xx/driverlib/dma.h>

#define `countDef` `instances.length`

/*
 *  ======== adcbufMSP432Objects ========
 */
ADCBufMSP432_Object adcbufMSP432Objects[`countDef`];

/*
 *  ======== ADCBuf Channels ========
 */
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    %
ADCBufMSP432_Channels adcBufMSP432Channels[`inst.numChans`] = {
    % for (let j = 0; j < inst.numChans; j++) {
    %   let bufChan = inst["chan" + j];
    %   let adcPin;
    %   if (bufChan.inputSource == "External Pin") {
    %       adcPin = getAdcBufPinName(bufChan.adc.adcPin.$solution.devicePinName);
    %   }
    %   else {
    %       adcPin = "ADCBufMSP432_PIN_NONE";
    %   }
    %   let vRef = bufChan.refVoltage;
    %
    %   let vSrc = "";
    %   switch (bufChan.refSource) {
    %       case "VDD":
    %           vSrc = "ADCBufMSP432_VREFPOS_AVCC_VREFNEG_VSS";
    %           break;
    %       case "1.2V":
    %           vSrc = "ADCBufMSP432_VREFPOS_INTBUF_VREFNEG_VSS";
    %           break;
    %       case "1.45V":
    %           vSrc = "ADCBufMSP432_VREFPOS_INTBUF_VREFNEG_VSS";
    %           break;
    %       case "2.5V":
    %           vSrc = "ADCBufMSP432_VREFPOS_INTBUF_VREFNEG_VSS";
    %           break;
    %       case "External":
    %           vSrc = "ADCBufMSP432_VREFPOS_EXTPOS_VREFNEG_EXTNEG";
    %           break;
    %       case "External Buffered":
    %           vSrc = "ADCBufMSP432_VREFPOS_EXTBUF_VREFNEG_EXTNEG";
    %           break;
    %   };
    %
    %   let inMode = "ADCBufMSP432_SINGLE_ENDED";
    %   let diffPin = "ADCBufMSP432_PIN_NONE";
    %   switch (bufChan.inputMode) {
    %       case "Non Differential":
    %           inMode = "ADCBufMSP432_SINGLE_ENDED";
    %           diffPin = "ADCBufMSP432_PIN_NONE";
    %           break;
    %       case "Differential":
    %           inMode = "ADCBufMSP432_DIFFERENTIAL";
    %           diffPin = getAdcBufPinName(inst["chan" + j].adc.adcDiffPin.$solution.devicePinName);
    %           break;
    %   };
    %
    %   let intSrc = "ADCBufMSP432_INTERNAL_SOURCE_MODE_OFF";
    %   switch (bufChan.inputSource) {
    %       case "External Pin":
    %           intSrc = "ADCBufMSP432_INTERNAL_SOURCE_MODE_OFF";
    %           break;
    %       case "Internal Temperature":
    %           intSrc = "ADCBufMSP432_TEMPERATURE_MODE";
    %           break;
    %       case "Internal Battery":
    %           intSrc = "ADCBufMSP432_BATTERY_MONITOR_MODE";
    %           break;
    %   };
    /* Board_ADCBUFCHANNEL`j` */
    {
        .adcPin = `adcPin`,
        .refSource = `vSrc`,
        .refVoltage = `vRef`,
        .adcInputMode = `inMode`,
        .adcDifferentialPin = `diffPin`,
        .adcInternalSource = `intSrc`
    },
    % };
};

% }
/*
 *  ======== adcbufMSP432HWAttrs ========
 */
const ADCBufMSP432_HWAttrs adcbufMSP432HWAttrs[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % let dmaIntNum = inst.useDMA ? inst.adc.dmaIntNum.$solution.devicePinName : 0;
    % let trigSrc = "ADCBufMSP432_TIMER_TRIGGER";
    % if (inst.adcTriggerSource == "Auto") {
    %     trigSrc = "ADCBufMSP432_SOFTWARE_AUTOMATIC_TRIGGER";
    % }
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .channelSetting = adcBufMSP432Channels,
        .intPriority = `Common.intPriority2Hex(inst.intPriority)`,
        .clockSource = ADCBufMSP432_`inst.clockSource`_CLOCK,
        .useDMA = `inst.useDMA`,
        .dmaIntNum = `dmaIntNum`,
        .adcTriggerSource = `trigSrc`,
    % if (inst.adcTriggerSource == "Timer") {
    %     let trig = inst.timer.$solution.peripheralName;
    %     let timerId = trig.substr(trig.indexOf("A"), 2);
        .adcTimerTriggerSource = ADCBufMSP432_TIMER`timerId`_CAPTURECOMPARE1,
        .timerDutyCycle = `inst.timerDutyCycle`
    % }
    },
% }
};

/*
 *  ======== ADCBuf_config ========
 */
const ADCBuf_Config ADCBuf_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % let name = inst.$name;
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .fxnTablePtr = &ADCBufMSP432_fxnTable,
        .object = &adcbufMSP432Objects[`name`],
        .hwAttrs = &adcbufMSP432HWAttrs[`name`]
    },
% }
};

const uint_least8_t ADCBuf_count = `countDef`;
